generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum AttributeType {
  LENGTH
  MASS
  TIME
  NUMBER
  STRING
}

// Model definitions

model ActivityCategory {
  id          Int        @id @default(autoincrement()) @map("activity_category_id")
  title       String
  description String?   @db.VarChar(512)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  activities  Activity[]
  @@map("activity_categories")
}

model Activity {
  id          Int               @id @default(autoincrement()) @map("activity_id")

  category    ActivityCategory  @relation(fields: [categoryId], references: [id])
  categoryId  Int  

  title       String
  description String?   @db.VarChar(512)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  attributes  ActivityActivityAttributes[]
  @@map("activities")
}

model ActivityAttribute {
  id            Int        @id @default(autoincrement()) @map("activity_attribute_id")
  title         String
  description String?   @db.VarChar(512)
  attributeType AttributeType @default(LENGTH)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  attributes    ActivityActivityAttributes[]
  @@map("activity_attributes")
}

model ActivityActivityAttributes {
  activity          Activity           @relation(fields: [activityId], references: [id])
  activityId        Int

  activityAttribute ActivityAttribute  @relation(fields: [attributeId], references: [id])
  attributeId       Int
 
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([activityId, attributeId])
  @@map("activity_activity_attributes")
}

model Workout {
  id        Int     @id @default(autoincrement()) @map("workout_id")
  title     String
  members   MemberWorkout[]

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workouts")
}

model Member {
  id        Int     @id @default(autoincrement()) @map("member_id")
  email     String  @unique
  name      String?
  role      Role    @default(MEMBER)
  workouts  MemberWorkout[]

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
} 

model MemberWorkout {
  member    Member  @relation(fields: [memberId], references: [id])
  memberId  Int

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([memberId, workoutId])
  @@map("member_workouts")
}


